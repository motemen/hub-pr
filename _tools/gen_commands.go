package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"regexp"
	"strings"
)

const template = `// generated by _tools/gen_commands.go
package main

func init() {%s
}
`

const commandTemplate = `
	commands[%q] = command{
		action:      %s,
		name:        %q,
		usage:       %q,
		description: %q,
	}`

func main() {
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, "main.go", nil, parser.ParseComments)
	if err != nil {
		log.Fatal(err)
	}

	commands := []string{}
	for _, decl := range f.Decls {
		funcDecl, ok := decl.(*ast.FuncDecl)
		if !ok || funcDecl.Doc == nil {
			continue
		}

		doc := funcDecl.Doc.Text()
		pos := strings.Index(doc, "+command")
		if pos == -1 {
			continue
		}

		doc = doc[pos+len("+command "):]
		re := regexp.MustCompile(`(\w+) +-? +(.+)\n((?s).+)`)
		m := re.FindStringSubmatch(doc)
		if m == nil {
			continue
		}

		var (
			name        = m[1]
			usage       = m[2]
			description = strings.TrimSpace(m[3])
		)

		commands = append(
			commands,
			fmt.Sprintf(commandTemplate, name, funcDecl.Name.Name, name, usage, description),
		)
	}

	code := fmt.Sprintf(template, strings.Join(commands, ""))
	out, err := os.Create("commands.go")
	if err != nil {
		log.Fatal(err)
	}

	out.WriteString(code)
	out.Close()
}
